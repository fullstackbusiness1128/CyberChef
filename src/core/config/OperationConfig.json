{
    "Cartesian Product": {
        "module": "Default",
        "description": "Get the cartesian product of two sets",
        "inputType": "string",
        "outputType": "string",
        "flowControl": false,
        "args": [
            {
                "name": "Sample delimiter",
                "type": "binaryString",
                "value": "\\n\\n"
            },
            {
                "name": "Item delimiter",
                "type": "binaryString",
                "value": ","
            }
        ]
    },
    "From Base32": {
        "module": "Default",
        "description": "Base32 is a notation for encoding arbitrary byte data using a restricted set of symbols that can be conveniently used by humans and processed by computers. It uses a smaller set of characters than Base64, usually the uppercase alphabet and the numbers 2 to 7.",
        "inputType": "string",
        "outputType": "byteArray",
        "flowControl": false,
        "args": [
            {
                "name": "Alphabet",
                "type": "binaryString",
                "value": "A-Z2-7="
            },
            {
                "name": "Remove non-alphabet chars",
                "type": "boolean",
                "value": true
            }
        ]
    },
    "From Base64": {
        "module": "Default",
        "description": "Base64 is a notation for encoding arbitrary byte data using a restricted set of symbols that can be conveniently used by humans and processed by computers.<br><br>This operation decodes data from an ASCII Base64 string back into its raw format.<br><br>e.g. <code>aGVsbG8=</code> becomes <code>hello</code>",
        "inputType": "string",
        "outputType": "byteArray",
        "flowControl": false,
        "args": [
            {
                "name": "Alphabet",
                "type": "editableOption",
                "value": [
                    {
                        "name": "Standard: A-Za-z0-9+/=",
                        "value": "A-Za-z0-9+/="
                    },
                    {
                        "name": "URL safe: A-Za-z0-9-_",
                        "value": "A-Za-z0-9-_"
                    },
                    {
                        "name": "Filename safe: A-Za-z0-9+-=",
                        "value": "A-Za-z0-9+\\-="
                    },
                    {
                        "name": "itoa64: ./0-9A-Za-z=",
                        "value": "./0-9A-Za-z="
                    },
                    {
                        "name": "XML: A-Za-z0-9_.",
                        "value": "A-Za-z0-9_."
                    },
                    {
                        "name": "y64: A-Za-z0-9._-",
                        "value": "A-Za-z0-9._-"
                    },
                    {
                        "name": "z64: 0-9a-zA-Z+/=",
                        "value": "0-9a-zA-Z+/="
                    },
                    {
                        "name": "Radix-64: 0-9A-Za-z+/=",
                        "value": "0-9A-Za-z+/="
                    },
                    {
                        "name": "Uuencoding: [space]-_",
                        "value": " -_"
                    },
                    {
                        "name": "Xxencoding: +-0-9A-Za-z",
                        "value": "+\\-0-9A-Za-z"
                    },
                    {
                        "name": "BinHex: !-,-0-689@A-NP-VX-Z[`a-fh-mp-r",
                        "value": "!-,-0-689@A-NP-VX-Z[`a-fh-mp-r"
                    },
                    {
                        "name": "ROT13: N-ZA-Mn-za-m0-9+/=",
                        "value": "N-ZA-Mn-za-m0-9+/="
                    },
                    {
                        "name": "UNIX crypt: ./0-9A-Za-z",
                        "value": "./0-9A-Za-z"
                    }
                ]
            },
            {
                "name": "Remove non-alphabet chars",
                "type": "boolean",
                "value": true
            }
        ]
    },
    "From Hex": {
        "module": "Default",
        "description": "Converts a hexadecimal byte string back into its raw value.<br><br>e.g. <code>ce 93 ce b5 ce b9 ce ac 20 cf 83 ce bf cf 85 0a</code> becomes the UTF-8 encoded string <code>Γειά σου</code>",
        "inputType": "string",
        "outputType": "byteArray",
        "flowControl": false,
        "args": [
            {
                "name": "Delimiter",
                "type": "option",
                "value": [
                    "Space",
                    "Comma",
                    "Semi-colon",
                    "Colon",
                    "Line feed",
                    "CRLF",
                    "0x",
                    "\\x",
                    "None"
                ]
            }
        ]
    },
    "Gunzip": {
        "module": "Compression",
        "description": "Decompresses data which has been compressed using the deflate algorithm with gzip headers.",
        "inputType": "byteArray",
        "outputType": "byteArray",
        "flowControl": false,
        "args": []
    },
    "Gzip": {
        "module": "Compression",
        "description": "Compresses data using the deflate algorithm with gzip headers.",
        "inputType": "byteArray",
        "outputType": "byteArray",
        "flowControl": false,
        "args": [
            {
                "name": "Compression type",
                "type": "option",
                "value": [
                    "Dynamic Huffman Coding",
                    "Fixed Huffman Coding",
                    "None (Store)"
                ]
            },
            {
                "name": "Filename (optional)",
                "type": "string",
                "value": ""
            },
            {
                "name": "Comment (optional)",
                "type": "string",
                "value": ""
            },
            {
                "name": "Include file checksum",
                "type": "boolean",
                "value": false
            }
        ]
    },
    "Power Set": {
        "module": "Default",
        "description": "Generate the power set of a set",
        "inputType": "string",
        "outputType": "string",
        "flowControl": false,
        "args": [
            {
                "name": "Item delimiter",
                "type": "binaryString",
                "value": ","
            }
        ]
    },
    "ROT13": {
        "module": "Default",
        "description": "A simple caesar substitution cipher which rotates alphabet characters by the specified amount (default 13).",
        "inputType": "byteArray",
        "outputType": "byteArray",
        "flowControl": false,
        "args": [
            {
                "name": "Rotate lower case chars",
                "type": "boolean",
                "value": true
            },
            {
                "name": "Rotate upper case chars",
                "type": "boolean",
                "value": true
            },
            {
                "name": "Amount",
                "type": "number",
                "value": 13
            }
        ]
    },
    "ROT47": {
        "module": "Default",
        "description": "A slightly more complex variation of a caesar cipher, which includes ASCII characters from 33 '!' to 126 '~'. Default rotation: 47.",
        "inputType": "byteArray",
        "outputType": "byteArray",
        "flowControl": false,
        "args": [
            {
                "name": "Amount",
                "type": "number",
                "value": 47
            }
        ]
    },
    "Raw Deflate": {
        "module": "Compression",
        "description": "Compresses data using the deflate algorithm with no headers.",
        "inputType": "byteArray",
        "outputType": "byteArray",
        "flowControl": false,
        "args": [
            {
                "name": "Compression type",
                "type": "option",
                "value": [
                    "Dynamic Huffman Coding",
                    "Fixed Huffman Coding",
                    "None (Store)"
                ]
            }
        ]
    },
    "Raw Inflate": {
        "module": "Compression",
        "description": "Decompresses data which has been compressed using the deflate algorithm with no headers.",
        "inputType": "byteArray",
        "outputType": "byteArray",
        "flowControl": false,
        "args": [
            {
                "name": "Start index",
                "type": "number",
                "value": 0
            },
            {
                "name": "Initial output buffer size",
                "type": "number",
                "value": 0
            },
            {
                "name": "Buffer expansion type",
                "type": "option",
                "value": [
                    "Adaptive",
                    "Block"
                ]
            },
            {
                "name": "Resize buffer after decompression",
                "type": "boolean",
                "value": false
            },
            {
                "name": "Verify result",
                "type": "boolean",
                "value": false
            }
        ]
    },
    "Rotate left": {
        "module": "Default",
        "description": "Rotates each byte to the left by the number of bits specified, optionally carrying the excess bits over to the next byte. Currently only supports 8-bit values.",
        "inputType": "byteArray",
        "outputType": "byteArray",
        "flowControl": false,
        "args": [
            {
                "name": "Amount",
                "type": "number",
                "value": 1
            },
            {
                "name": "Carry through",
                "type": "boolean",
                "value": false
            }
        ]
    },
    "Rotate right": {
        "module": "Default",
        "description": "Rotates each byte to the right by the number of bits specified, optionally carrying the excess bits over to the next byte. Currently only supports 8-bit values.",
        "inputType": "byteArray",
        "outputType": "byteArray",
        "flowControl": false,
        "args": [
            {
                "name": "Amount",
                "type": "number",
                "value": 1
            },
            {
                "name": "Carry through",
                "type": "boolean",
                "value": false
            }
        ]
    },
    "Set Difference": {
        "module": "Default",
        "description": "Get the Difference of two sets",
        "inputType": "string",
        "outputType": "string",
        "flowControl": false,
        "args": [
            {
                "name": "Sample delimiter",
                "type": "binaryString",
                "value": "\\n\\n"
            },
            {
                "name": "Item delimiter",
                "type": "binaryString",
                "value": ","
            }
        ]
    },
    "Set Intersection": {
        "module": "Default",
        "description": "Get the intersection of two sets",
        "inputType": "string",
        "outputType": "string",
        "flowControl": false,
        "args": [
            {
                "name": "Sample delimiter",
                "type": "binaryString",
                "value": "\\n\\n"
            },
            {
                "name": "Item delimiter",
                "type": "binaryString",
                "value": ","
            }
        ]
    },
    "Set Union": {
        "module": "Default",
        "description": "Get the union of two sets",
        "inputType": "string",
        "outputType": "string",
        "flowControl": false,
        "args": [
            {
                "name": "Sample delimiter",
                "type": "binaryString",
                "value": "\\n\\n"
            },
            {
                "name": "Item delimiter",
                "type": "binaryString",
                "value": ","
            }
        ]
    },
    "Show Base64 offsets": {
        "module": "Default",
        "description": "When a string is within a block of data and the whole block is Base64'd, the string itself could be represented in Base64 in three distinct ways depending on its offset within the block.<br><br>This operation shows all possible offsets for a given string so that each possible encoding can be considered.",
        "inputType": "byteArray",
        "outputType": "html",
        "flowControl": false,
        "args": [
            {
                "name": "Alphabet",
                "type": "binaryString",
                "value": "A-Za-z0-9+/="
            },
            {
                "name": "Show variable chars and padding",
                "type": "boolean",
                "value": true
            }
        ]
    },
    "Symmetric Difference": {
        "module": "Default",
        "description": "Get the symmetric difference of two sets",
        "inputType": "string",
        "outputType": "string",
        "flowControl": false,
        "args": [
            {
                "name": "Sample delimiter",
                "type": "binaryString",
                "value": "\\n\\n"
            },
            {
                "name": "Item delimiter",
                "type": "binaryString",
                "value": ","
            }
        ]
    },
    "To Base32": {
        "module": "Default",
        "description": "Base32 is a notation for encoding arbitrary byte data using a restricted set of symbols that can be conveniently used by humans and processed by computers. It uses a smaller set of characters than Base64, usually the uppercase alphabet and the numbers 2 to 7.",
        "inputType": "byteArray",
        "outputType": "string",
        "flowControl": false,
        "args": [
            {
                "name": "Alphabet",
                "type": "binaryString",
                "value": "A-Z2-7="
            }
        ]
    },
    "To Base64": {
        "module": "Default",
        "description": "Base64 is a notation for encoding arbitrary byte data using a restricted set of symbols that can be conveniently used by humans and processed by computers.<br><br>This operation decodes data from an ASCII Base64 string back into its raw format.<br><br>e.g. <code>aGVsbG8=</code> becomes <code>hello</code>",
        "inputType": "ArrayBuffer",
        "outputType": "string",
        "flowControl": false,
        "args": [
            {
                "name": "Alphabet",
                "type": "editableOption",
                "value": [
                    {
                        "name": "Standard: A-Za-z0-9+/=",
                        "value": "A-Za-z0-9+/="
                    },
                    {
                        "name": "URL safe: A-Za-z0-9-_",
                        "value": "A-Za-z0-9-_"
                    },
                    {
                        "name": "Filename safe: A-Za-z0-9+-=",
                        "value": "A-Za-z0-9+\\-="
                    },
                    {
                        "name": "itoa64: ./0-9A-Za-z=",
                        "value": "./0-9A-Za-z="
                    },
                    {
                        "name": "XML: A-Za-z0-9_.",
                        "value": "A-Za-z0-9_."
                    },
                    {
                        "name": "y64: A-Za-z0-9._-",
                        "value": "A-Za-z0-9._-"
                    },
                    {
                        "name": "z64: 0-9a-zA-Z+/=",
                        "value": "0-9a-zA-Z+/="
                    },
                    {
                        "name": "Radix-64: 0-9A-Za-z+/=",
                        "value": "0-9A-Za-z+/="
                    },
                    {
                        "name": "Uuencoding: [space]-_",
                        "value": " -_"
                    },
                    {
                        "name": "Xxencoding: +-0-9A-Za-z",
                        "value": "+\\-0-9A-Za-z"
                    },
                    {
                        "name": "BinHex: !-,-0-689@A-NP-VX-Z[`a-fh-mp-r",
                        "value": "!-,-0-689@A-NP-VX-Z[`a-fh-mp-r"
                    },
                    {
                        "name": "ROT13: N-ZA-Mn-za-m0-9+/=",
                        "value": "N-ZA-Mn-za-m0-9+/="
                    },
                    {
                        "name": "UNIX crypt: ./0-9A-Za-z",
                        "value": "./0-9A-Za-z"
                    }
                ]
            }
        ]
    },
    "To Hex": {
        "module": "Default",
        "description": "Converts the input string to hexadecimal bytes separated by the specified delimiter.<br><br>e.g. The UTF-8 encoded string <code>Γειά σου</code> becomes <code>ce 93 ce b5 ce b9 ce ac 20 cf 83 ce bf cf 85 0a</code>",
        "inputType": "ArrayBuffer",
        "outputType": "string",
        "flowControl": false,
        "args": [
            {
                "name": "Delimiter",
                "type": "option",
                "value": [
                    "Space",
                    "Comma",
                    "Semi-colon",
                    "Colon",
                    "Line feed",
                    "CRLF",
                    "0x",
                    "\\x",
                    "None"
                ]
            }
        ]
    },
    "Unzip": {
        "module": "Compression",
        "description": "Decompresses data using the PKZIP algorithm and displays it per file, with support for passwords.",
        "inputType": "byteArray",
        "outputType": "html",
        "flowControl": false,
        "args": [
            {
                "name": "Password",
                "type": "binaryString",
                "value": ""
            },
            {
                "name": "Verify result",
                "type": "boolean",
                "value": false
            }
        ]
    },
    "Zip": {
        "module": "Compression",
        "description": "Compresses data using the PKZIP algorithm with the given filename.<br><br>No support for multiple files at this time.",
        "inputType": "byteArray",
        "outputType": "byteArray",
        "flowControl": false,
        "args": [
            {
                "name": "Filename",
                "type": "string",
                "value": "file.txt"
            },
            {
                "name": "Comment",
                "type": "string",
                "value": ""
            },
            {
                "name": "Password",
                "type": "binaryString",
                "value": ""
            },
            {
                "name": "Compression method",
                "type": "option",
                "value": [
                    "Deflate",
                    "None (Store)"
                ]
            },
            {
                "name": "Operating system",
                "type": "option",
                "value": [
                    "MSDOS",
                    "Unix",
                    "Macintosh"
                ]
            },
            {
                "name": "Compression type",
                "type": "option",
                "value": [
                    "Dynamic Huffman Coding",
                    "Fixed Huffman Coding",
                    "None (Store)"
                ]
            }
        ]
    },
    "Zlib Deflate": {
        "module": "Compression",
        "description": "Compresses data using the deflate algorithm adding zlib headers.",
        "inputType": "byteArray",
        "outputType": "byteArray",
        "flowControl": false,
        "args": [
            {
                "name": "Compression type",
                "type": "option",
                "value": [
                    "Dynamic Huffman Coding",
                    "Fixed Huffman Coding",
                    "None (Store)"
                ]
            }
        ]
    },
    "Zlib Inflate": {
        "module": "Compression",
        "description": "Decompresses data which has been compressed using the deflate algorithm with zlib headers.",
        "inputType": "byteArray",
        "outputType": "byteArray",
        "flowControl": false,
        "args": [
            {
                "name": "Start index",
                "type": "number",
                "value": 0
            },
            {
                "name": "Initial output buffer size",
                "type": "number",
                "value": 0
            },
            {
                "name": "Buffer expansion type",
                "type": "option",
                "value": [
                    "Adaptive",
                    "Block"
                ]
            },
            {
                "name": "Resize buffer after decompression",
                "type": "boolean",
                "value": false
            },
            {
                "name": "Verify result",
                "type": "boolean",
                "value": false
            }
        ]
    }
}